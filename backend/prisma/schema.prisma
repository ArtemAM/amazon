// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  email      String   @unique
  password   String
  phone      String   @default("")
  avatarPath String?  @default("/uploads/default-avatar.png") @map("avatar_path")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  orders  Order[]
  reviews Review[]
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String   @unique
  slug        String   @unique
  description String
  price       Int

  images     ProductImage[]
  orderItems OrderItem[]
  reviews    Review[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String   @map("image_url")
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rating Int
  text   String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?     @map("order_id")
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)
  items  OrderItem[]

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
